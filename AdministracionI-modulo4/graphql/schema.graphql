# Schema GraphQL completo para testing

type DeleteResult {
    success: Boolean!
    message: String!
    deleted_id: String
}

# Empleado type
type Empleado {
    id_empleado: ID!
    nombre: String!
    cargo: String!
    correo: String!
    telefono: String
    created_at: String
    updated_at: String
}

# Vehiculo type
type Vehiculo {
    id_vehiculo: ID!
    placa: String!
    marca: String!
    modelo: String!
    anio: Int!
    tipo_id: String!
    estado: String!
    created_at: String
    updated_at: String
    sucursales: [VehiculoSucursal!]
}

# Sucursal type
type Sucursal {
    id_sucursal: ID!
    nombre: String!
    direccion: String!
    ciudad: String!
    telefono: String
    created_at: String
    updated_at: String
    vehiculos: [VehiculoSucursal!]
}

# User type
type User {
    id_usuario: ID!
    empleado_id: ID!
    username: String!
    rol_id: ID!
    created_at: String
    updated_at: String
    rol: Rol
    empleado: Empleado
}

# Rol type
type Rol {
    id_rol: ID!
    nombre: String!
    descripcion: String
    created_at: String
    updated_at: String
    users: [User!]
}

# VehiculoSucursal type
type VehiculoSucursal {
    id: ID!
    id_vehiculo: ID!
    id_sucursal: ID!
    fecha_asignacion: String
    created_at: String
    updated_at: String
    vehiculo: Vehiculo
    sucursal: Sucursal
}

# Input types
input EmpleadoInput {
    nombre: String!
    cargo: String!
    correo: String!
    telefono: String
}

input VehiculoInput {
    placa: String!
    marca: String!
    modelo: String!
    anio: Int!
    tipo_id: String!
    estado: String!
}

input SucursalInput {
    nombre: String!
    direccion: String!
    ciudad: String!
    telefono: String
}

input UserInput {
    empleado_id: ID!
    username: String!
    password: String!
    rol_id: ID!
}

input RolInput {
    nombre: String!
    descripcion: String
}

input VehiculoSucursalInput {
    id_vehiculo: ID!
    id_sucursal: ID!
    fecha_asignacion: String
}

# Query and Mutation types
type Query {
    empleados: [Empleado!]!
    empleado(id_empleado: ID!): Empleado
    vehiculos: [Vehiculo!]!
    vehiculo(id_vehiculo: ID!): Vehiculo
    sucursales: [Sucursal!]!
    sucursal(id_sucursal: ID!): Sucursal
    users: [User!]!
    usuarios: [User!]!
    user(id_usuario: ID!): User
    roles: [Rol!]!
    rol(id_rol: ID!): Rol
    vehiculoSucursales: [VehiculoSucursal!]!
    vehiculoSucursal(id: ID!): VehiculoSucursal
}

type Mutation {
    crearEmpleado(input: EmpleadoInput!): Empleado
    actualizarEmpleado(id_empleado: ID!, input: EmpleadoInput!): Empleado
    eliminarEmpleado(id_empleado: ID!): DeleteResult
    
    crearVehiculo(input: VehiculoInput!): Vehiculo
    actualizarVehiculo(id_vehiculo: ID!, input: VehiculoInput!): Vehiculo
    eliminarVehiculo(id_vehiculo: ID!): DeleteResult
    
    crearSucursal(input: SucursalInput!): Sucursal
    actualizarSucursal(id_sucursal: ID!, input: SucursalInput!): Sucursal
    eliminarSucursal(id_sucursal: ID!): DeleteResult
    
    crearUser(input: UserInput!): User
    actualizarUser(id_usuario: ID!, input: UserInput!): User
    eliminarUser(id_usuario: ID!): DeleteResult
    
    crearRol(input: RolInput!): Rol
    actualizarRol(id_rol: ID!, input: RolInput!): Rol
    eliminarRol(id_rol: ID!): DeleteResult
    
    crearVehiculoSucursal(input: VehiculoSucursalInput!): VehiculoSucursal
    asignarVehiculoSucursal(id_vehiculo: String!, id_sucursal: String!, fecha_asignacion: String!): VehiculoSucursal
    actualizarVehiculoSucursal(id: ID!, input: VehiculoSucursalInput!): VehiculoSucursal
    eliminarVehiculoSucursal(id: ID!): DeleteResult
}